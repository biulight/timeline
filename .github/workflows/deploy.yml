name: Deployment
on:
  push:
    branches:
      - release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 22.18.0
      - name: Install deps
        run: npm install
      - name: Build
        run: npm run build
      - name: Upload static files as artifact
        id: pages_artifact
        uses: actions/upload-pages-artifact@v4 # or specific "vX.X.X" version tag for this action
        with:
          path: build/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
      contents: write  # tag + release + merge
    environment:
      name: github-pages
      url: ${{ steps.deploy_pages.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deploy_pages
        uses: actions/deploy-pages@v4
      - name: Download build artifact for SSH deploy
        uses: actions/download-pages-artifact@v3
        with:
          path: build
      - name: SSH deploy to server
        uses: easingthemes/ssh-deploy@v5.1.1
        env:
          REMOTE_USER: ${{ secrets.ALY_USER }}
          REMOTE_HOST: ${{ secrets.ALY_HOST }}
          REMOTE_PORT: "22"
          ARGS: "-rltgoDzvO --delete"
          SSH_PRIVATE_KEY: ${{ secrets.ALY_SSH_TOKEN }}
          SOURCE: "build/*"
          TARGET: "/var/www/timeline"
      - name: Checkout code for tagging
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create tag
        id: create_tag
        run: |
          set -e
          TAG="v$(date +%Y%m%d-%H%M%S)-${GITHUB_RUN_NUMBER}"
          echo "TAG_NAME=$TAG" >> $GITHUB_ENV
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag "$TAG" "$GITHUB_SHA"
          git push origin "$TAG"
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.TAG_NAME }}
          body: Automated release
          draft: false
          prerelease: false
      - name: Merge release branch into main
        run: |
          set -e
          git fetch origin main
          git checkout main

          git merge --no-ff "${GITHUB_REF_NAME}" -m "chore: merge ${GITHUB_REF_NAME} into main after deployment ${GITHUB_RUN_NUMBER}" || {
            echo "Merge conflict. Please resolve manually."; exit 1; }
          git push origin main
