name: Deployment
on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Environment'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - uat
          - prod
      node_version:
        description: 'Node.js version'
        required: false
        default: '22.18.0'
        type: string
  push:
    branches:
      - release

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy_target }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ inputs.node_version }}
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ inputs.node_version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install deps
        run: npm install
      - name: Build
        run: npm run build
      - name: Upload static files as artifact
        id: pages_artifact
        uses: actions/upload-pages-artifact@v4 # or specific "vX.X.X" version tag for this action
        with:
          path: build/
      - name: Upload build artifact (for SSH deploy)
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: build/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
      contents: write  # tag + release + merge
      pull-requests: write
    environment:
      name: ${{ inputs.deploy_target }}
      url: ${{ steps.deploy_pages.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        if: inputs.deploy_target == 'prod'
        id: deploy_pages
        uses: actions/deploy-pages@v4
      - name: Download build artifact for SSH deploy
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: build
      - name: SSH deploy to server
        uses: easingthemes/ssh-deploy@v5.1.1
        env:
          REMOTE_USER: ${{ vars.ALY_USER }}
          REMOTE_HOST: ${{ vars.ALY_HOST }}
          REMOTE_PORT: "22"
          ARGS: "-rltgoDzvO --delete"
          SSH_PRIVATE_KEY: ${{ secrets.ALY_SSH_TOKEN }}
          SOURCE: "build/*"
          TARGET: "/var/www/timeline"
      - name: Checkout code for tagging
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Create tag
        id: create_tag
        run: |
          set -e
          TAG="v$(date +%Y%m%d-%H%M%S)-${GITHUB_RUN_NUMBER}"
          echo "TAG_NAME=$TAG" >> $GITHUB_ENV
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag "$TAG" "$GITHUB_SHA"
          git push origin "$TAG"
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.TAG_NAME }}
          body: Automated release
          draft: false
          prerelease: false
      - name: Create PR to merge into main
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = process.env.GITHUB_REF_NAME; // current release branch
            const { data: existing } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branch}`,
              base: 'main'
            });
            if (existing.length) { core.info(`PR already exists: #${existing[0].number}`); return; }
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: branch,
              base: 'main',
              title: `chore: merge ${branch} into main (auto after deploy)`,
              body: 'Auto-created by CI after successful deploy.'
            });
            core.notice(`Created PR #${pr.number}`);
