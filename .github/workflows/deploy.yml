on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Environment'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - uat
          - prod
      node_version:
        description: 'Node.js version'
        required: false
        default: '22.18.0'
        type: string
  push:
    branches:
      - release

# 最小必要权限（根级），尽量收窄为后续步骤需要的权限
permissions:
  contents: write       # 推送 tag、创建 release、checkout/push 操作
  pages: write          # deploy-pages / upload-pages-artifact
  id-token: write       # deploy-pages 可能需要 OIDC
  pull-requests: write  # github-script 创建 PR

concurrency:
  group: deployment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 预检步骤：在任何构建/部署前检测必须的 secrets/vars 是否存在，早失败并提示缺失项
  preflight:
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_target || 'dev' }}
    steps:
      - name: Check required secrets and variables
        id: check
        run: |
          missing=""
          # Check SSH secret for server deploy and repo vars for host/user
          if [ -z "${{ secrets.ALY_SSH_TOKEN }}" ]; then
            missing="${missing} secrets.ALY_SSH_TOKEN"
          fi
          if [ -z "${{ vars.ALY_USER }}" ]; then
            missing="${missing} vars.ALY_USER"
          fi
          if [ -z "${{ vars.ALY_HOST }}" ]; then
            missing="${missing} vars.ALY_HOST"
          fi

          # If Pages deployment will run (only for workflow_dispatch + prod), we don't require extra secrets here.
          # Emit helpful guidance and fail early if any required items missing.
          if [ -n "$missing" ]; then
            echo "Missing required configuration:$missing"
            echo "::error::Missing required configuration:$missing"
            exit 1
          fi

          echo "All required secrets/vars present."
          echo "::set-output name=ready::true"

  build:
    needs: preflight
    runs-on: ubuntu-latest
    env:
      DEPLOY_TARGET: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_target || 'dev' }}
      NODE_VERSION: ${{ github.event_name == 'workflow_dispatch' && inputs.node_version || '22.18.0' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install deps
        run: npm install

      - name: Build
        run: npm run build

      - name: Upload static files as artifact for Pages
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_target == 'prod' }}
        id: pages_artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: build/

      - name: Upload build artifact (for SSH deploy)
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: build/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_target || 'dev' }}
    env:
      DEPLOY_TARGET: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_target || 'dev' }}
    steps:
      - name: Deploy to GitHub Pages
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_target == 'prod' }}
        id: deploy_pages
        uses: actions/deploy-pages@v4

      - name: Download build artifact for SSH deploy
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: build

      - name: SSH deploy to server
        uses: easingthemes/ssh-deploy@v5.1.1
        env:
          REMOTE_USER: ${{ vars.ALY_USER }}
          REMOTE_HOST: ${{ vars.ALY_HOST }}
          REMOTE_PORT: "22"
          ARGS: "-rltgoDzvO --delete"
          SSH_PRIVATE_KEY: ${{ secrets.ALY_SSH_TOKEN }}
          SOURCE: "build/*"
          TARGET: "/var/www/timeline"

      - name: Checkout code for tagging
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Create tag
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_target == 'prod' }}
        id: create_tag
        run: |
          set -e
          TAG="v$(date +%Y%m%d-%H%M%S)-${GITHUB_RUN_NUMBER}"
          echo "TAG_NAME=$TAG" >> $GITHUB_ENV
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag "$TAG" "$GITHUB_SHA"
          git push origin "$TAG"

      - name: Generate changelog
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_target == 'prod' }}
        id: gen_changelog
        run: |
          set -e
          TAG="$TAG_NAME"
          # Find previous tag (excluding current one)
          PREV_TAG=$(git tag --sort=-creatordate | sed -n '2p') || true
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag; using full history"
            git log --pretty=format:'* %s (%h)' > CHANGELOG.md
          else
            git log "$PREV_TAG..$TAG" --pretty=format:'* %s (%h)' > CHANGELOG.md
          fi
          if [ ! -s CHANGELOG.md ]; then
            echo '* No changes' > CHANGELOG.md
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          cat CHANGELOG.md >> $GITHUB_ENV
          echo EOF >> $GITHUB_ENV


      - name: Create GitHub Release
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_target == 'prod' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.TAG_NAME }}
          body: ${{ env.CHANGELOG }}
          draft: false
          prerelease: false

      - name: Create PR to merge into main
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ref = context.ref || '';
            const branch = ref.replace('refs/heads/', '');
            if (!branch) {
              core.info('Cannot determine branch name from context.ref; skipping PR creation.');
              return;
            }
            const { data: existing } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branch}`,
              base: 'main'
            });
            if (existing.length) { core.info(`PR already exists: #${existing[0].number}`); return; }
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: branch,
              base: 'main',
              title: `chore: merge ${branch} into main (auto after deploy)`,
              body: 'Auto-created by CI after successful deploy.'
            });
            core.notice(`Created PR #${pr.number}`);
